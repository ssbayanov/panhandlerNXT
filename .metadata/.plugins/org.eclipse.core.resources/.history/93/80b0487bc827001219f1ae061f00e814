package com.tetrix.bluetooth;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View.OnTouchListener;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
//import android.
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import android.os.Handler;
import android.os.Message;
import android.preference.PreferenceManager;

public class PoproshaikaActivity extends Activity {
	public static final String SHARED_PREFS_NAME="preferences";
	private static final boolean D = true;
	// private static final String TAG = "BluetoothChat";
	/** Called when the activity is first created. */

	// Name of the connected device
	private String mConnectedDeviceName = null;

	public static final String DEVICE_NAME = "device_name";
	public static final String TOAST = "toast";

	private BluetoothAdapter mBluetoothAdapter = null;

	// Intent request codes
	private static final int REQUEST_CONNECT_DEVICE_SECURE = 1;
	private static final int REQUEST_DISCONNECT_DEVICE = 2;
	private static final int REQUEST_ENABLE_BT = 3;

	// Message types sent from the BluetoothChatService Handler
	public static final int MESSAGE_STATE_CHANGE = 1;
	public static final int MESSAGE_READ = 2;
	public static final int MESSAGE_WRITE = 3;
	public static final int MESSAGE_DEVICE_NAME = 4;
	public static final int MESSAGE_TOAST = 5;

	private BluetoothChatService mChatService = null;
	// private ArrayAdapter<String> mConversationArrayAdapter;

	public TextView Name;
	public Button buttonScan;
	public boolean on;
	public MySurfaceView Surf;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);

		LinearLayout linearlayout = (LinearLayout) findViewById(R.id.main_layout);

		Surf = new MySurfaceView(this);
		linearlayout.addView(Surf);

		Name = (TextView) findViewById(R.id.name);

		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		// If the adapter is null, then Bluetooth is not supported
		if (mBluetoothAdapter == null) {
			Toast.makeText(this, R.string.bt_not_supported, Toast.LENGTH_LONG).show();
			finish();
			return;
		}
		
		// Check enabled Bluetooth adapter
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableIntent = new Intent(
					BluetoothAdapter.ACTION_REQUEST_ENABLE);
					startActivityForResult(enableIntent, REQUEST_ENABLE_BT);
		}
	};
	
	private void getPrefs() {
        // Get the xml/preferences.xml preferences
        SharedPreferences prefs = PreferenceManager
                        .getDefaultSharedPreferences(getBaseContext());
        CheckboxPreference = prefs.getBoolean("checkboxPref", true);
        ListPreference = prefs.getString("listPref", "nr1");
        editTextPreference = prefs.getString("editTextPref",
                        "Nothing has been entered");
        ringtonePreference = prefs.getString("ringtonePref",
                        "DEFAULT_RINGTONE_URI");
        secondEditTextPreference = prefs.getString("SecondEditTextPref",
                        "Nothing has been entered");
        // Get the custom preference
        SharedPreferences mySharedPreferences = getSharedPreferences(
                        "myCustomSharedPrefs", Activity.MODE_PRIVATE);
        customPref = mySharedPreferences.getString("myCusomPref", "");
}
	
	//setup buttons and Bluetooth connection
	private void setupProgram()
	{
		
		Toast.makeText(this, R.string.bt_enabled, Toast.LENGTH_LONG).show();
		mChatService = new BluetoothChatService(this, mHandler);
		
		setupButton(R.id.foward, 'W');
		setupButton(R.id.backward, 'S');
		setupButton(R.id.backwardLeft, 'Z');
		setupButton(R.id.backwardRight, 'C');
		setupButton(R.id.fowardLeft, 'Q');
		setupButton(R.id.fowardRight, 'E');
		setupButton(R.id.left, 'A');
		setupButton(R.id.right, 'D');
				
		//setup toggle scanButton
		buttonScan = (Button) findViewById(R.id.buttonScan);
		buttonScan.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) 
			{
				buttonScan.setMinWidth(buttonScan.getWidth());
				toggleScan();
			}
		});
	}
	
	
	//setup buttons events onTouch and onClick
	private void setupButton(int id,final char c) 
	{

		Button but = (Button) findViewById(id);
		//Setup listener on touch to button
		but.setOnTouchListener(new OnTouchListener() {
			public boolean onTouch(View v, MotionEvent event) {
				sendMessage(c);
				return false;
			}
		});
		
		//Setup listener on release (click) to button
		but.setOnClickListener(new Button.OnClickListener() {
			public void onClick(View v) 
			{
				sendMessage('T');
			}
		});
	}

	private void toggleScan() {
		Surf.onResumeMySurfaceView();
		if (on) {
			sendMessage('H');
			buttonScan.setText(R.string.button_scan_off);
			on = false;
		} else {
			sendMessage('B');
			buttonScan.setText(R.string.button_scan_on);
			on = true;
		}
	}

	@Override
	protected void onDestroy() {
		if(mChatService != null)
			mChatService.stop();
		super.onDestroy();
	}

	//Send message to NXT device
	private void sendMessage(char msg) {
		// Check that we're actually connected before trying anything
		if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
			Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT)
			.show();
			Log.e("sendMessage", "not connected "+msg);
			return;
		}

		byte[] send = { 6, 0, -128, 9, 0, 2, (byte) msg, 0 };

		mChatService.write(send);
		if (D)
			Log.i("Message", "sendMessage " + send[0] + " " + send[1] + " "
					+ send[2] + " " + send[3] + " " + send[4] + " " + send[5]
							+ " " + (char) send[6] + " " + send[7]);
		// Reset out string buffer to zero and clear the edit text field
		// }
	}

	//Run program for control tetrix 
	private void startProgramm(char[] msg) {
		// Check that we're actually connected before trying anything
		if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
			Toast.makeText(this, R.string.not_connected, Toast.LENGTH_SHORT)
			.show();
			Log.e("sendMessage", "not connected");
			return;
		}

		byte[] send;
		send = new byte[msg.length + 4];
		send[0] = (byte) (msg.length + 2);
		send[1] = 0;
		send[2] = -128;
		send[3] = 0;

		for (int i = 0; i < msg.length; i++)
			send[i + 4] = (byte) msg[i];
		send[msg.length + 3] = 0x00;

		mChatService.write(send);
		if (D)
			Log.i("Message", "sendMessage " + send[0] + " " + (char) msg[0]
					+ " " + (char) msg[1] + " " + (char) msg[2] + " "
					+ (char) msg[3] + " " + (char) msg[4] + " " + (char) msg[5]
							+ " " + (char) msg[6] + " " + (char) msg[7] + " "
							+ (char) msg[8] + " " + (char) msg[9]);
	}

	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case MESSAGE_STATE_CHANGE:
				if (D)
					Log.i("Handler", "MESSAGE_STATE_CHANGE: " + msg.arg1);
				switch (msg.arg1) {
				case BluetoothChatService.STATE_CONNECTED:
					// setStatus(getString(R.string.title_connected_to,
					// mConnectedDeviceName));
					// mConversationArrayAdapter.clear();
					break;
				case BluetoothChatService.STATE_CONNECTING:
					// setStatus(R.string.title_connecting);
					break;
				case BluetoothChatService.STATE_LISTEN:
				case BluetoothChatService.STATE_NONE:
					// setStatus(R.string.title_not_connected);
					break;
				}
				break;
			case MESSAGE_WRITE:
				// byte[] writeBuf = (byte[]) msg.obj;
				// construct a string from the buffer
				// String writeMessage = new String(writeBuf);
				// mConversationArrayAdapter.add("Me:  " + writeMessage);
				break;
			case MESSAGE_READ:
				/*byte[] readBuf = (byte[]) msg.obj;
				short i = (short) (0x0000 + (readBuf[1] << 8) + readBuf[0]+32767);*/
				
				// construct a string from the valid bytes in the buffer
				// String readMessage = new String(readBuf, 0, msg.arg1);
				// mConversationArrayAdapter.add(mConnectedDeviceName+":  " +
				// readMessage);
				break;
			case MESSAGE_DEVICE_NAME:
				// save the connected device's name
				mConnectedDeviceName = msg.getData().getString(DEVICE_NAME);
				Toast.makeText(getApplicationContext(),
						"Connected to " + mConnectedDeviceName,
						Toast.LENGTH_SHORT).show();
				break;
			case MESSAGE_TOAST:
				Toast.makeText(getApplicationContext(),
						msg.getData().getString(TOAST), Toast.LENGTH_SHORT)
						.show();
				break;
			}
		}
	};

	public void GetRobotName() {
		// Name.setText("Здесь будет имя робота");
	};

	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (D)
			Log.d("onActivityResult", "onActivityResult " + resultCode);
		switch (requestCode) {
		case REQUEST_CONNECT_DEVICE_SECURE:
			// When DeviceListActivity returns with a device to connect
			if (resultCode == Activity.RESULT_OK) {
				connectDevice(data, true);
			}
			break;
		case REQUEST_DISCONNECT_DEVICE:
			// When DeviceListActivity returns with a device to connect
			if (resultCode == Activity.RESULT_OK) {
				connectDevice(data, false);
			}
			break;
		case REQUEST_ENABLE_BT:
			// When the request to enable Bluetooth returns
			if (resultCode == Activity.RESULT_OK) {
				// Bluetooth is now enabled, so set up a BT session
				setupProgram();
			} else {
				// User did not enable Bluetooth or an error occurred
				Log.d("onActivityResult", "BT not enabled");
				Toast.makeText(this, R.string.bt_not_enabled, Toast.LENGTH_SHORT).show();
				finish();
			}
		}
	}

	private void connectDevice(Intent data, boolean secure) {
		// Get the device MAC address
		String address = data.getExtras().getString(
				DeviceListActivity.EXTRA_DEVICE_ADDRESS);
		// Get the BluetoothDevice object
		BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
		Name.setText(device.getName());
		mConnectedDeviceName = device.getName();
		// Attempt to connect to the device

		mChatService.connect(device, secure);
	}

	private void ensureDiscoverable() {
		if (D)
			Log.d("ensureDiscoverable", "ensure discoverable");
		if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
			Intent discoverableIntent = new Intent(
					BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
			discoverableIntent.putExtra(
					BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
			startActivity(discoverableIntent);
		}
	};

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.option_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		Intent serverIntent = null;
		switch (item.getItemId()) {
		case R.id.secure_connect_scan:
			// Launch the DeviceListActivity to see devices and do scan
			serverIntent = new Intent(this, DeviceListActivity.class);
			startActivityForResult(serverIntent, REQUEST_CONNECT_DEVICE_SECURE);
			return true;
		case R.id.disconnect:
			// Launch the DeviceListActivity to see devices and do scan
			/*
			 * serverIntent = new Intent(this, DeviceListActivity.class);
			 * startActivityForResult(serverIntent,
			 * REQUEST_CONNECT_DEVICE_INSECURE);
			 */
			mChatService.stop();
			return true;
		case R.id.preferences:
			Intent settingsActivity = new Intent(getBaseContext(),
                    Preferences.class);
			startActivity(settingsActivity);
			return true;
		case R.id.discoverable:
			// Ensure this device is discoverable by others
			ensureDiscoverable();
			return true;
		case R.id.run_programm:
			// Ensure this device is discoverable by others
			// ensureDiscoverable();
			
			char[] name = { 'n', 'x', 't', 't', 't', '.', 'r', 'x', 'e', 0x00 };
			startProgramm(name);
			return true;
		}
		return false;
	}

}
